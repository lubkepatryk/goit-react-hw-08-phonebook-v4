{"version":3,"file":"static/js/931.a7d586df.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;\n\nexport const getContacts = state => {\n    return state.contacts.items;\n  };\n  \n  export const getFilter = state => {\n    return state.contacts.filter;\n  };","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","import { useSelector } from 'react-redux';\n// import { Contact } from '../Contact/Contact';\nimport { selectAllContacts } from 'redux/contacts/selectors';\n// import css from './ContactList.module.css';\nimport PropTypes from 'prop-types';\n// import { deleteContact } from 'redux/contacts/operations';\nimport { delContact } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\nimport Button from '@mui/material/Button';\nimport css from './ContactList.module.css';\n\n// export const ContactList = () => {\n//   const contacts = useSelector(selectAllContacts);\n\n//   return (\n//     <ul className={css.list}>\n//       {contacts.map(({ id, name, number }) => (\n//         <li key={id}>\n//           <Contact id={id} name={name} number={number} />\n//         </li>\n//       ))}\n//     </ul>\n//   );\n// };\nexport const ContactList = ({ id }) => {\n  const contacts = useSelector(selectAllContacts);\n  const dispatch = useDispatch();\n  //const handleDelete = () => dispatch(deleteContact(id));\n  const handleDelete = () => dispatch(delContact(id));\n  return (\n    <ul className={css.list}>\n      {contacts.map((contact, id) => (\n        <li className={css.item} key={id}>\n          {contact.name} {contact.number}\n          <Button\n            variant=\"contained\"\n            type=\"button\"\n            onClick={() => handleDelete(contact.id)}\n          >\n            {' '}\n            Delete{' '}\n          </Button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"filterLabel\":\"Filter_filterLabel__+pnW-\"};","import css from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from '..//../redux/contacts/selectors';\nimport { setFilter } from '..//../redux/contacts/operations';\nimport TextField from '@mui/material/TextField';\n\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const handleChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <div>\n      <h2>Search contacts</h2>\n      <label className={css.filterLabel}>Find contacts by Name </label>\n      <TextField id=\"standard-basic\" variant=\"standard\"\n        className={css.filterName}\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Enter filter\"\n        value={filter}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// import { useDispatch } from 'react-redux';\n// import { useState } from 'react';\n// import { addContact } from 'redux/contacts/operations';\n// import css from './ContactEditor.module.css';\n// import { nanoid } from '@reduxjs/toolkit';\n\n// export const ContactEditor = () => {\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n//   const dispatch = useDispatch();\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     const form = e.currentTarget;\n//     const name = form.elements.name.value;\n//     const number = form.elements.number.value;\n//     if (name !== '') {\n//       dispatch(addContact(name, number));\n//       form.reset();\n//       return;\n//     }\n//     alert('Contact name cannot be empty. Enter some text!');\n//   };\n\n//   const handleChangeName = (event) => {\n//     const value = event.target.value;\n//     setName(value);\n//   };\n\n//   const handleChangeNumber = (event) => {\n//     const value = event.target.value;\n//     setNumber(value);\n//   };\n\n//   const loginNameId = nanoid();\n//   const loginNumberId = nanoid();\n\n//   return (\n//     <form className={css.form} onSubmit={handleSubmit}>\n//       <label className={css.label} htmlFor={loginNameId}>\n//           Name\n//         </label>\n//         <input\n//           id={loginNameId}\n//           onChange={handleChangeName}\n//           value={name}\n//           type=\"text\"\n//           name=\"name\"\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//           required\n//         />\n\n//         <label className={css.label} htmlFor={loginNumberId}>\n//           {' '}\n//           Number{' '}\n//         </label>\n//         <input\n//           id={loginNumberId}\n//           onChange={handleChangeNumber}\n//           value={number}\n//           type=\"tel\"\n//           name=\"number\"\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//           required\n//         />\n//       <button type=\"submit\" className={css.button}>\n//         Add contact\n//       </button>\n//     </form>\n//   );\n// };\n\nimport { useState } from 'react';\nimport css from './ContactForm.module.css';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { nanoid } from 'nanoid';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const handleChangeName = event => {\n    const value = event.target.value;\n    setName(value);\n  };\n\n  const handleChangeNumber = event => {\n    const value = event.target.value;\n    setNumber(value);\n  };\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    dispatch(addContact({ nameText: name, numberText: number }));\n    setName('');\n    setNumber('');\n  };\n\n  const loginNameId = nanoid();\n  const loginNumberId = nanoid();\n\n  return (\n    <div>\n      <h2>Add new contact</h2>\n      <form className={css.form} onSubmit={handleFormSubmit}>\n        <label className={css.label} htmlFor={loginNameId}>\n          Name\n        </label>\n        <TextField\n          variant=\"standard\"\n          id={loginNameId}\n          onChange={handleChangeName}\n          value={name}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n\n        <label className={css.label} htmlFor={loginNumberId}>\n          {' '}\n          Number{' '}\n        </label>\n        <TextField\n          variant=\"standard\"\n          id={loginNumberId}\n          onChange={handleChangeNumber}\n          value={number}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <Button variant=\"contained\">Add contact</Button>\n      </form>\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { fetchContacts, delContact } from 'redux/contacts/operations';\nimport { selectLoading, getContacts, getFilter } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getFilteredContacts = () => {\n    const filterContactsList = contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filter.toLowerCase());\n    });\n    return filterContactsList;\n  };\n\n  const handleDelete = contactId => {\n    dispatch(delContact(contactId));\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <Filter />\n      <ContactList \n      contacts={getFilteredContacts()}\n      handleDelete={handleDelete}/>\n    </>\n  );\n}"],"names":["selectLoading","state","contacts","loading","selectAllContacts","items","getContacts","getFilter","filter","ContactList","id","useSelector","dispatch","useDispatch","handleDelete","delContact","className","css","map","contact","name","number","Button","variant","type","onClick","Filter","TextField","placeholder","value","onChange","e","setFilter","target","nanoid","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","useState","setName","setNumber","loginNameId","loginNumberId","onSubmit","event","preventDefault","addContact","nameText","numberText","htmlFor","pattern","title","required","Contacts","isLoading","useEffect","fetchContacts","Helmet","toLowerCase","includes","contactId"],"sourceRoot":""}