{"version":3,"file":"static/js/931.dcd711e0.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","redux/contacts/selectors.js","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"phoneNumber\":\"ContactList_phoneNumber__NaQTH\"};","import { useDispatch } from 'react-redux';\n// import { selectAllContacts } from 'redux/contacts/selectors';\nimport { delContact } from 'redux/contacts/operations';\nimport Button from '@mui/material/Button';\nimport css from './ContactList.module.css';\n\nexport const ContactList = ({ contacts }) => {\n  const dispatch = useDispatch();\n  const handleDelete = (contactId) => dispatch(delContact(contactId));\n\n  return (\n    <ul className={css.list}>\n      {contacts.map((contact) => (\n        <li className={css.item} key={contact.id}>\n          <span className={css.phoneNumber}>{contact.name} {contact.number}</span>\n          <Button\n            variant=\"contained\"\n            type=\"button\"\n            onClick={() => handleDelete(contact.id)}\n          >\n            Delete\n          </Button>\n        </li>\n      ))}\n    </ul>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"filterLabel\":\"Filter_filterLabel__+pnW-\",\"filterContainer\":\"Filter_filterContainer__8G57N\",\"filterHeading\":\"Filter_filterHeading__Wg28v\"};","export const selectLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;\n\nexport const getContacts = state => {\n    return state.contacts.items;\n  };\n  \n  export const getFilter = state => {\n    return state.contacts.filter;\n  };","import css from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from '..//../redux/contacts/selectors';\nimport { setFilter } from '..//../redux/contacts/operations';\nimport TextField from '@mui/material/TextField';\n\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const handleChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <div className={css.filterContainer}>\n      <h2 className={css.filterHeading}>Search contacts</h2>\n      <label className={css.filterLabel}>Find contacts by Name </label>\n      <TextField id=\"standard-basic\" variant=\"standard\"\n        className={css.filterName}\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Enter filter\"\n        value={filter}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"formHeading\":\"ContactForm_formHeading__hmhZp\",\"form\":\"ContactForm_form__dhl+T\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { useState } from 'react';\nimport css from './ContactForm.module.css';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { nanoid } from 'nanoid';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const handleChangeName = event => {\n    const value = event.target.value;\n    setName(value);\n  };\n\n  const handleChangeNumber = event => {\n    const value = event.target.value;\n    setNumber(value);\n  };\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    dispatch(addContact({ nameText: name, numberText: number }));\n    setName('');\n    setNumber('');\n  };\n\n  const loginNameId = nanoid();\n  const loginNumberId = nanoid();\n\n  return (\n    <div>\n      <h2 className={css.formHeading}>Add new contact</h2>\n      <form className={css.form} onSubmit={handleFormSubmit}>\n        <label className={css.label} htmlFor={loginNameId}>\n          Name\n        </label>\n        <TextField\n          variant=\"standard\"\n          id={loginNameId}\n          onChange={handleChangeName}\n          value={name}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n\n        <label className={css.label} htmlFor={loginNumberId}>\n          {' '}\n          Number{' '}\n        </label>\n        <TextField\n          variant=\"standard\"\n          id={loginNumberId}\n          onChange={handleChangeNumber}\n          value={number}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <Button variant=\"contained\" type=\"submit\">Add contact</Button>\n      </form>\n    </div>\n  );\n};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { fetchContacts, delContact } from 'redux/contacts/operations';\nimport { selectLoading, getContacts, getFilter } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getFilteredContacts = () => {\n    const filterContactsList = contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filter.toLowerCase());\n    });\n    return filterContactsList;\n  };\n\n  const handleDelete = contactId => {\n    dispatch(delContact(contactId));\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <Filter />\n      <ContactList \n      contacts={getFilteredContacts()}\n      handleDelete={handleDelete}/>\n    </>\n  );\n}"],"names":["ContactList","contacts","dispatch","useDispatch","className","css","map","contact","name","number","Button","variant","type","onClick","contactId","id","delContact","selectLoading","state","loading","getContacts","items","getFilter","filter","Filter","useSelector","TextField","placeholder","value","onChange","e","setFilter","target","nanoid","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","useState","setName","setNumber","loginNameId","loginNumberId","onSubmit","event","preventDefault","addContact","nameText","numberText","htmlFor","pattern","title","required","Contacts","isLoading","useEffect","fetchContacts","Helmet","toLowerCase","includes","handleDelete"],"sourceRoot":""}