{"version":3,"file":"static/js/41.6481a733.chunk.js","mappings":"qNAAaA,EAAgB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,OAAnB,EAIrBC,EAAoB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,KAAnB,ECHtC,GAAgB,KAAO,2B,mBCqBVC,EAAc,SAAC,GAAU,IAATC,EAAQ,EAARA,GAClBL,GAAWM,EAAAA,EAAAA,IAAYJ,GACvBK,GAAWC,EAAAA,EAAAA,MACXC,EAAe,kBAAMF,GAASG,EAAAA,EAAAA,IAAcL,GAA7B,EACrB,OAEH,wBACGL,EAASW,KAAI,SAACC,EAASP,GAAV,OACZ,0BACGO,EAAQC,KADX,IACkBD,EAAQE,QACxB,oBACEC,UAAWC,EAAAA,OACXC,KAAK,SACLC,QAAS,kBAAMT,EAAaG,EAAQP,GAA3B,EAHX,UAKG,IALH,SAMS,SARFA,EADG,KAcf,E,UC1CH,GAAgB,KAAO,0BAA0B,MAAQ,2BAA2B,OAAS,6BCkBzFc,EAAS,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACff,EAAK,GACLgB,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEff,GADEoB,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOpB,CACR,EC6CYuB,EAAc,WACzB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOhB,EAAP,KAAaiB,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOf,EAAP,KAAeiB,EAAf,KACMxB,GAAWC,EAAAA,EAAAA,MAmBXwB,EAAcb,IACdc,EAAgBd,IAEtB,OACE,0BACE,kBAAMJ,UAAWC,EAAAA,KAAUkB,SAZN,SAACC,GACxBA,EAAMC,iBACN7B,GAAS8B,EAAAA,EAAAA,IAAW,CAAEC,SAAUzB,EAAM0B,WAAYzB,KAClDgB,EAAQ,IACRC,EAAU,GACX,EAOG,WACE,kBAAOhB,UAAWC,EAAAA,MAAWwB,QAASR,EAAtC,mBAGA,kBACE3B,GAAI2B,EACJS,SA5BiB,SAACN,GACxB,IAAMO,EAAQP,EAAMQ,OAAOD,MAC3BZ,EAAQY,EACT,EA0BOA,MAAO7B,EACPI,KAAK,OACLJ,KAAK,OACL+B,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,KAGV,mBAAO/B,UAAWC,EAAAA,MAAWwB,QAASP,EAAtC,UACG,IADH,SAES,QAET,kBACE5B,GAAI4B,EACJQ,SAtCmB,SAACN,GAC1B,IAAMO,EAAQP,EAAMQ,OAAOD,MAC3BX,EAAUW,EACX,EAoCOA,MAAO5B,EACPG,KAAK,MACLJ,KAAK,SACL+B,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,KAEV,mBAAQ/B,UAAWC,EAAAA,WAAnB,6BAIP,ECpIc,SAAS+B,IACtB,IAAMxC,GAAWC,EAAAA,EAAAA,MACXwC,GAAY1C,EAAAA,EAAAA,IAAYR,GAM9B,OAJAmD,EAAAA,EAAAA,YAAU,WACR1C,GAAS2C,EAAAA,EAAAA,MACV,GAAE,CAAC3C,KAGF,iCACE,SAAC4C,EAAA,EAAD,WACE,gDAEF,SAACvB,EAAD,KACA,yBAAMoB,GAAa,4BACnB,SAAC5C,EAAD,MAGL,C","sources":["redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","import { useSelector } from 'react-redux';\n// import { Contact } from '../Contact/Contact';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport css from './ContactList.module.css';\nimport PropTypes from 'prop-types';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\n\n\n// export const ContactList = () => {\n//   const contacts = useSelector(selectAllContacts);\n\n//   return (\n//     <ul className={css.list}>\n//       {contacts.map(({ id, name, number }) => (\n//         <li key={id}>\n//           <Contact id={id} name={name} number={number} />\n//         </li>\n//       ))}\n//     </ul>\n//   );\n// };\nexport const ContactList = ({id}) => {\n     const contacts = useSelector(selectAllContacts);\n     const dispatch = useDispatch();\n     const handleDelete = () => dispatch(deleteContact(id));\n     return  (\n  \n  <ul>\n    {contacts.map((contact, id) => (\n      <li key={id}>\n        {contact.name} {contact.number}\n        <button\n          className={css.button}\n          type=\"button\"\n          onClick={() => handleDelete(contact.id)}\n        >\n          {' '}\n          Delete{' '}\n        </button>\n      </li>\n    ))}\n  </ul>\n);};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// import { useDispatch } from 'react-redux';\n// import { useState } from 'react';\n// import { addContact } from 'redux/contacts/operations';\n// import css from './ContactEditor.module.css';\n// import { nanoid } from '@reduxjs/toolkit';\n\n// export const ContactEditor = () => {\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n//   const dispatch = useDispatch();\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     const form = e.currentTarget;\n//     const name = form.elements.name.value;\n//     const number = form.elements.number.value;\n//     if (name !== '') {\n//       dispatch(addContact(name, number));\n//       form.reset();\n//       return;\n//     }\n//     alert('Contact name cannot be empty. Enter some text!');\n//   };\n\n//   const handleChangeName = (event) => {\n//     const value = event.target.value;\n//     setName(value);\n//   };\n\n//   const handleChangeNumber = (event) => {\n//     const value = event.target.value;\n//     setNumber(value);\n//   };\n\n//   const loginNameId = nanoid();\n//   const loginNumberId = nanoid();\n\n//   return (\n//     <form className={css.form} onSubmit={handleSubmit}>\n//       <label className={css.label} htmlFor={loginNameId}>\n//           Name\n//         </label>\n//         <input\n//           id={loginNameId}\n//           onChange={handleChangeName}\n//           value={name}\n//           type=\"text\"\n//           name=\"name\"\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//           required\n//         />\n\n//         <label className={css.label} htmlFor={loginNumberId}>\n//           {' '}\n//           Number{' '}\n//         </label>\n//         <input\n//           id={loginNumberId}\n//           onChange={handleChangeNumber}\n//           value={number}\n//           type=\"tel\"\n//           name=\"number\"\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//           required\n//         />\n//       <button type=\"submit\" className={css.button}>\n//         Add contact\n//       </button>\n//     </form>\n//   );\n// };\n\nimport { useState } from 'react';\nimport css from './ContactForm.module.css';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { nanoid } from 'nanoid';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n\n  const handleChangeName = (event) => {\n    const value = event.target.value;\n    setName(value);\n  };\n\n  const handleChangeNumber = (event) => {\n    const value = event.target.value;\n    setNumber(value);\n  };\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n    dispatch(addContact({ nameText: name, numberText: number }));\n    setName('');\n    setNumber('');\n  };\n\n  const loginNameId = nanoid();\n  const loginNumberId = nanoid();\n\n  return (\n    <div>\n      <form className={css.form} onSubmit={handleFormSubmit}>\n        <label className={css.label} htmlFor={loginNameId}>\n          Name\n        </label>\n        <input\n          id={loginNameId}\n          onChange={handleChangeName}\n          value={name}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n\n        <label className={css.label} htmlFor={loginNumberId}>\n          {' '}\n          Number{' '}\n        </label>\n        <input\n          id={loginNumberId}\n          onChange={handleChangeNumber}\n          value={number}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <button className={css.formButton}>Add contact</button>\n      </form>\n    </div>\n  );\n};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n}"],"names":["selectLoading","state","contacts","loading","selectAllContacts","items","ContactList","id","useSelector","dispatch","useDispatch","handleDelete","deleteContact","map","contact","name","number","className","css","type","onClick","nanoid","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","useState","setName","setNumber","loginNameId","loginNumberId","onSubmit","event","preventDefault","addContact","nameText","numberText","htmlFor","onChange","value","target","pattern","title","required","Contacts","isLoading","useEffect","fetchContacts","Helmet"],"sourceRoot":""}